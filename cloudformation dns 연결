AWSTemplateFormatVersion: '2010-09-09'

# 이 템플릿은 기본 네트워크 인프라를 구성하고, sonrey.shop 도메인에 대한 Route 53 설정.

Parameters:
  # 기본 EKS 클러스터 이름
  ClusterBaseName:
    Type: String
    Default: eks-work
    Description: "Base name for the EKS cluster resources."

  # 배포할 AWS 리전
  TargetRegion:
    Type: String
    Default: ap-northeast-2
    Description: "The AWS region where the resources will be deployed."

  # 가용 영역 1
  AvailabilityZone1:
    Type: String
    Default: ap-northeast-2a
    Description: "The first availability zone for subnets."

  # 가용 영역 2
  AvailabilityZone2:
    Type: String
    Default: ap-northeast-2b
    Description: "The second availability zone for subnets."

  # 가용 영역 3
  AvailabilityZone3:
    Type: String
    Default: ap-northeast-2c
    Description: "The third availability zone for subnets."

  # VPC CIDR 블록
  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: "The CIDR block for the VPC."

  # 서브넷 1 CIDR 블록
  WorkerSubnet1Block:
    Type: String
    Default: 192.168.0.0/24
    Description: "The CIDR block for the first subnet."

  # 서브넷 2 CIDR 블록
  WorkerSubnet2Block:
    Type: String
    Default: 192.168.1.0/24
    Description: "The CIDR block for the second subnet."

  # 서브넷 3 CIDR 블록
  WorkerSubnet3Block:
    Type: String
    Default: 192.168.2.0/24
    Description: "The CIDR block for the third subnet."

  # 도메인 이름
  DomainName:
    Type: String
    Default: sonrey.shop
    Description: "The domain name to be associated with the infrastructure."

  # Route 53 호스팅 영역 ID
  HostedZoneId:
    Type: String
    Description: "The Route 53 Hosted Zone ID for the domain."

Resources:
  # VPC 생성
  EksWorkVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${ClusterBaseName}-VPC
    # 주석: VPC는 네트워크 리소스의 기본 컨테이너로, 서브넷과 기타 리소스를 포함합니다.

  # 첫 번째 서브넷 생성
  WorkerSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref WorkerSubnet1Block
      VpcId: !Ref EksWorkVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ClusterBaseName}-WorkerSubnet1
    # 주석: 첫 번째 서브넷은 퍼블릭 IP를 자동으로 할당하며 가용 영역 1에 배치됩니다.

  # 두 번째 서브넷 생성
  WorkerSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref WorkerSubnet2Block
      VpcId: !Ref EksWorkVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ClusterBaseName}-WorkerSubnet2
    # 주석: 두 번째 서브넷은 가용 영역 2에 배치됩니다.

  # 세 번째 서브넷 생성
  WorkerSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone3
      CidrBlock: !Ref WorkerSubnet3Block
      VpcId: !Ref EksWorkVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ClusterBaseName}-WorkerSubnet3
    # 주석: 세 번째 서브넷은 가용 영역 3에 배치됩니다.

  # 인터넷 게이트웨이 생성
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    # 주석: VPC에서 인터넷에 접근할 수 있도록 인터넷 게이트웨이를 추가합니다.

  # VPC와 인터넷 게이트웨이를 연결
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref EksWorkVPC
    # 주석: VPC에 인터넷 게이트웨이를 연결하여 인터넷 액세스를 활성화합니다.

  # 라우트 테이블 생성
  WorkerSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EksWorkVPC
      Tags:
        - Key: Name
          Value: !Sub ${ClusterBaseName}-WorkerSubnetRouteTable
    # 주석: VPC를 위한 라우트 테이블을 생성합니다.

  # 기본 라우트 추가 (0.0.0.0/0)
  WorkerSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref WorkerSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    # 주석: 모든 트래픽을 인터넷 게이트웨이로 보내는 기본 라우트를 설정합니다.

  # 서브넷 1과 라우트 테이블 연결
  WorkerSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WorkerSubnet1
      RouteTableId: !Ref WorkerSubnetRouteTable
    # 주석: 서브넷 1과 라우트 테이블을 연결합니다.

  # 서브넷 2과 라우트 테이블 연결
  WorkerSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WorkerSubnet2
      RouteTableId: !Ref WorkerSubnetRouteTable
    # 주석: 서브넷 2와 라우트 테이블을 연결합니다.

  # 서브넷 3과 라우트 테이블 연결
  WorkerSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WorkerSubnet3
      RouteTableId: !Ref WorkerSubnetRouteTable
    # 주석: 서브넷 3과 라우트 테이블을 연결합니다.

  # Route 53 호스팅 영역 생성
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DomainName
    # 주석: 도메인 관리를 위한 Route 53 호스팅 영역을 생성합니다.

  # Route 53 A 레코드 셋
  DNSRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      TTL: "60"
      ResourceRecords:
        - # Add your Load Balancer DNS name here, or other endpoint
    # 주석: 도메인 이름을 특정 IP 주소 또는 로드 밸런서 DNS 이름에 연결하는 A 레코드를 추가합니다.

Outputs:
  # 생성된 VPC의 ID
  VPC:
    Value: !Ref EksWorkVPC
    Description: "The ID of the created VPC."

  # 생성된 서브넷들의 리스트
  WorkerSubnets:
    Value: !Join
      - ","
      - [!Ref WorkerSubnet1, !Ref WorkerSubnet2, !Ref WorkerSubnet3]
    Description: "The list of worker subnets created."

  # 라우트 테이블 ID
  RouteTable:
    Value: !Ref WorkerSubnetRouteTable
    Description: "The ID of the route table for worker subnets."

  # 호스팅 영역 ID
  HostedZoneId:
    Value: !Ref HostedZone
    Description: "The ID of the created Route 53 Hosted Zone."

  # 도메인 이름과 연결된 A 레코드
  DNSRecord:
    Value: !Ref DNSRecordSet
    Description: "DNS A record for the domain."

  # 도메인 이름
  DomainName:
    Value: !Ref DomainName
    Description: "The domain name associated with the infrastructure."
